{
  "author": {
    "name": "Alejandro Alvarez Acero"
  },
  "name": "node-rest-client",
  "description": "node API REST client",
  "version": "0.7.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/aacerox/node-rest-client.git"
  },
  "main": "./lib/node-rest-client",
  "dependencies": {
    "xml2js": ">=0.2.4"
  },
  "devDependencies": {
    "jasmine-node": ">=1.2.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# REST Client for Node.js\r\n\r\nAllows connecting to any API REST and get results as js Object. The client has the following features:\r\n\r\n- Transparent HTTP/HTTPS connection to remote API sites.\r\n- Allows simple HTTP basic authentication.\r\n- Allows most common HTTP operations: GET, POST, PUT, DELETE.\r\n- Direct or through proxy connection to remote API sites.\r\n- Register remote API operations as client own methods, simplifying reuse.\r\n- Automatic parsing of XML and JSON response documents as js objects.\r\n- Dynamic path and query parameters and request headers.\r\n- Improved Error handling mechanism (client or specific request)\r\n\r\n\r\n## Installation\r\n\r\n$ npm install node-rest-client\r\n\r\n## Usages\r\n\r\n### Simple HTTP GET\r\n\r\nClient has 2 ways to call a REST service: direct or using registered methods\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\nclient = new Client();\r\n\r\n// direct way\r\nclient.get(\"http://remote.site/rest/xml/method\", function(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n\t\t});\r\n\r\n// registering remote methods\r\nclient.registerMethod(\"jsonMethod\", \"http://remote.site/rest/json/method\", \"GET\");\r\n\r\nclient.methods.jsonMethod(function(data,response){\r\n\t// parsed response body as js object\r\n\tconsole.log(data);\r\n\t// raw response\r\n\tconsole.log(response);\r\n});\r\n\r\n```\r\n\r\n\r\n### Passing args to registered methods\r\n\r\nYou can pass diferents args to registered methods, simplifying reuse: path replace parameters, query parameters, custom headers \r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\n// direct way\r\nclient = new Client();\r\n\r\nargs ={\r\n\t\tpath:{\"id\":120},\r\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\r\n\t\theaders:{\"test-header\":\"client-api\"}\r\n\t  };\r\n\r\n\r\nclient.get(\"http://remote.site/rest/json/${id}/method?arg1=hello&arg2=world\", args, \r\n\t\t\tfunction(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n});\r\n\r\n\r\n// registering remote methods\r\nclient.registerMethod(\"jsonMethod\", \"http://remote.site/rest/json/${id}/method\", \"GET\");\r\n\r\n\r\n\r\n/* this would construct the following URL before invocation\r\n *\r\n * http://remote.site/rest/json/120/method?arg1=hello&arg2=world\r\n *\r\n */ \r\nclient.methods.jsonMethod(args,function(data,response){\r\n\t// parsed response body as js object\r\n\tconsole.log(data);\r\n\t// raw response\r\n\tconsole.log(response);\r\n});\r\n\r\n```\r\n\r\nYou can even use path placeholders in query string in direct connection:\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\n// direct way\r\nclient = new Client();\r\n\r\nargs ={\r\n\t\tpath:{\"id\":120,\"arg1\":\"hello\",\"arg2\":\"world\"},\r\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\r\n\t\theaders:{\"test-header\":\"client-api\"}\r\n\t  };\r\n\r\nclient.get(\"http://remote.site/rest/json/${id}/method?arg1=${arg1}&arg2=${arg2}\", args, \r\n\t\tfunction(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n});\r\n\r\n```\r\n\r\n\r\n\r\n###  HTTP POST and PUT methods\r\n\r\nTo send data to remote site using POST or PUT methods, just add a data attribute to args object:\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\n// direct way\r\nclient = new Client();\r\n\r\nargs ={\r\n\t\tpath:{\"id\":120},\r\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\r\n\t\theaders:{\"test-header\":\"client-api\"},\r\n\t\tdata:\"<xml><arg1>hello</arg1><arg2>world</arg2></xml>\"\r\n\t  };\r\n\r\nclient.post(\"http://remote.site/rest/xml/${id}/method?arg1=hello&arg2=world\", args, function(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n});\r\n\r\n// registering remote methods\r\nclient.registerMethod(\"xmlMethod\", \"http://remote.site/rest/xml/${id}/method\", \"POST\");\r\n\r\n\r\nclient.methods.xmlMethod(args,function(data,response){\r\n\t// parsed response body as js object\r\n\tconsole.log(data);\r\n\t// raw response\r\n\tconsole.log(response);\r\n});\r\n\r\n// posted data can be js object\r\nargs_js ={\r\n\t\tpath:{\"id\":120},\r\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\r\n\t\theaders:{\"test-header\":\"client-api\"},\r\n\t\tdata:{\"arg1\":\"hello\",\"arg2\":123}\r\n\t  };\r\n\r\nclient.methods.xmlMethod(args_js,function(data,response){\r\n\t// parsed response body as js object\r\n\tconsole.log(data);\r\n\t// raw response\r\n\tconsole.log(response);\r\n});\r\n\r\n```\r\n\r\n\r\n### Connect through proxy\r\n\r\nJust pass proxy configuration as option to client\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\n// configure proxy\r\nvar options_proxy={\r\n\t\tproxy:{\r\n\t\t\thost:\"proxy.foo.com\",\r\n\t\t\tport:8080,\r\n\t\t\tuser:\"proxyuser\",\r\n\t\t\tpassword:\"123\"\r\n\t\t}\r\n\t},\r\n\r\nclient = new Client(options_proxy);\r\n\r\n```\r\n\r\n### Basic HTTP auth\r\n\r\nJust pass username and password as option to client. Every request done with the client will pass username and password as basic authorization header.\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\n// configure basic http auth for every request\r\nvar options_auth={user:\"admin\",password:\"123\"};\r\n\r\nclient = new Client(options_auth);\r\n\r\n```\r\n\r\n### Options parameters\r\n\r\nYou can pass the following args when creating a new client:\r\n\r\n```javascript\r\n\r\nvar options ={\r\n\t// proxy configuration\r\n\tproxy:{\r\n\t\t\thost:\"proxy.foo.com\", // proxy host\r\n\t\t\tport:8080, // proxy port\r\n\t\t\tuser:\"ellen\", // proxy username if required\r\n\t\t\tpassword:\"ripley\" // proxy pass if required\r\n\t\t},\r\n\t// aditional connection options passed to node http.request y https.request methods \r\n\t// (ie: options to connect to IIS with SSL)\t\r\n\tconnection:{\t\r\n\t\tsecureOptions: constants.SSL_OP_NO_TLSv1_2,\r\n\t\tciphers:'ECDHE-RSA-AES256-SHA:AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM',\r\n\t\thonorCipherOrder: true\r\n\t},\r\n\t// customize mime types for json or xml connections\r\n\tmimetypes:{\r\n\t\tjson:[\"application/json\",\"application/json;charset=utf-8\"],\r\n\t\txml:[\"application/xml\",\"application/xml;charset=utf-8\"]\r\n\t},\t\r\n\tuser:\"admin\", // basic http auth username if required\r\n\tpassword:\"123\" // basic http auth password if required\r\n};\r\n\r\n```\r\n\r\n### Managing Requests\r\n\r\nEach REST method invocation returns a request object with specific request options and error handler.\r\n\r\n```javascript\r\nvar Client = require('node-rest-client').Client;\r\n\r\nclient = new Client();\r\n\r\n// direct way\r\nvar req1 = client.get(\"http://remote.site/rest/xml/method\", function(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n\t\t});\r\n\r\n// view req1 options\t\t\r\nconsole.log(req1.options);\r\n\r\n// registering remote methods\r\nclient.registerMethod(\"jsonMethod\", \"http://remote.site/rest/json/method\", \"GET\");\r\n\r\nvar req2=client.methods.jsonMethod(function(data,response){\r\n\t// parsed response body as js object\r\n\tconsole.log(data);\r\n\t// raw response\r\n\tconsole.log(response);\r\n});\r\n\r\n// handling specific req2 errors\r\nreq2.on('error',function(err){\r\n\tconsole.log('something went wrong on req2!!', err.request.options);\r\n});\r\n```\r\n\r\n###  Error Handling\r\n\r\n Now you can handle error events in two places: on client or on each request.\r\n\r\n```javascript\r\n\r\nclient = new Client(options_auth);\r\n\r\n// handling request error events\r\nclient.get(\"http://remote.site/rest/xml/method\", function(data, response){\r\n\t\t\t// parsed response body as js object\r\n\t\t\tconsole.log(data);\r\n\t\t\t// raw response\r\n\t\t\tconsole.log(response);\r\n\t\t}).on('error',function(err){\r\n\t\t\tconsole.log('something went wrong on the request', err.request.options);\r\n\t\t});\r\n\r\n// handling client error events\r\nclient.on('error',function(err){\r\n\tconsole.error('Something went wrong on the client', err);\r\n});\r\n\r\n```",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/aacerox/node-rest-client/issues"
  },
  "_id": "node-rest-client@0.7.0",
  "dist": {
    "shasum": "b17efca2c0fa5e1a7de8e925c2a0af16a195c1f8"
  },
  "_from": "node-rest-client@",
  "_resolved": "https://registry.npmjs.org/node-rest-client/-/node-rest-client-0.7.0.tgz"
}
